name: Every-Circle-Backend CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:

      - name: Clone Repository
        run: |
          git clone https://github.com/infinite-options/Every-Circle-Backend.git
          cd Every-Circle-Backend
          ls
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Dependencies
        run: |
          cd Every-Circle-Backend
          echo "=== GITHUB ACTIONS: Installing PyTorch ==="
          pip3 install torch==2.2.2+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html || echo "PyTorch installation failed, but continuing..."
          echo "=== GITHUB ACTIONS: Installing requirements-part1 ==="
          # pip3 install -r requirements.txt
          pip3 install -r requirements-part1.txt || echo "requirements-part1 installation failed, but continuing..."
          pip3 cache purge
          echo "=== GITHUB ACTIONS: Installing requirements-part2 ==="
          pip3 install -r requirements-part2.txt || echo "requirements-part2 installation failed, but continuing..."
          pip3 cache purge
          # Immediately downgrade numpy to avoid runtime crashes
          pip3 list
          echo "=== GITHUB ACTIONS: Installing numpy ==="
          pip3 install numpy==1.24.3 || echo "numpy installation failed, but continuing..."
         

      - name: Run app to test
        id: test
        run: |
          cd Every-Circle-Backend
          python3 ec_api.py &
          sleep 10
          if ! pgrep -f "python3 ec_api.py"; then
            echo "App failed to start"
            exit 1
          fi
      
      - name: Deploy to EC2
        if: success()
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          # Clean and validate environment variables
          EC2_HOST=$(echo "${EC2_HOST}" | tr -d '[:space:]')
          EC2_USER=$(echo "${EC2_USER}" | tr -d '[:space:]')
          
          # Debug: Check if environment variables are set
          echo "EC2_HOST: '${EC2_HOST}'"
          echo "EC2_USER: '${EC2_USER}'"
          echo "SSH key length: ${#EC2_SSH_KEY}"
          echo "EC2_HOST length: ${#EC2_HOST}"
          
          # Fail if any required variable is empty
          if [ -z "$EC2_HOST" ]; then
            echo "Error: EC2_HOST is not set or empty"
            exit 1
          fi
          if [ -z "$EC2_USER" ]; then
            echo "Error: EC2_USER is not set or empty"
            exit 1
          fi
          if [ -z "$EC2_SSH_KEY" ]; then
            echo "Error: EC2_SSH_KEY is not set or empty"
            exit 1
          fi
          
          echo "All environment variables are set. Creating SSH key file..."
          echo "${EC2_SSH_KEY}" > ssh_key.pem
          chmod 400 ssh_key.pem
          
          # Validate SSH key format
          echo "Checking SSH key format..."
          if echo "${EC2_SSH_KEY}" | head -1 | grep -q "^-----BEGIN"; then
            echo "SSH key appears to have proper header"
            KEY_START=$(echo "${EC2_SSH_KEY}" | head -2 | tail -1 | cut -c1-8)
            echo "SSH key starts with: '$KEY_START'"
            if [ "$KEY_START" = "MIIEpAI" ]; then
              echo "SSH key format validation: PASSED"
            else
              echo "Warning: SSH key does not start with 'MIIEpAI', starts with '$KEY_START'"
            fi
          else
            echo "Warning: SSH key does not appear to have proper PEM header"
          fi
          
          # Validate expected values
          if [ "$EC2_USER" != "ec2-user" ]; then
            echo "Warning: EC2_USER is '$EC2_USER', expected 'ec2-user'"
          else
            echo "EC2_USER validation: PASSED"
          fi
          if [ "$EC2_HOST" != "204.236.135.231" ]; then
            echo "Warning: EC2_HOST is '$EC2_HOST', expected '204.236.135.231'"
          else
            echo "EC2_HOST validation: PASSED"
          fi
          
          echo "Setting up SSH directory and adding EC2 host to known_hosts..."
          echo "Current working directory: $(pwd)"
          echo "Home directory: $HOME"
          
          # Create SSH directory with detailed logging
          echo "Creating SSH directory..."
          mkdir -p ~/.ssh
          echo "SSH directory creation result: $?"
          ls -la ~/ | grep ssh || echo "No .ssh directory found in home"
          
          # Test if we can write to the SSH directory
          echo "Testing SSH directory write access..."
          touch ~/.ssh/test_file && rm ~/.ssh/test_file && echo "SSH directory is writable" || echo "SSH directory is not writable"
          
          echo "Adding EC2 host to known_hosts..."
          ssh-keyscan -H ${EC2_HOST} >> ~/.ssh/known_hosts 2>&1
          echo "ssh-keyscan result: $?"
          
          echo "Setting up SSH directory and adding EC2 host to known_hosts..."
          echo "Current working directory: $(pwd)"
          echo "Home directory: $HOME"
          
          # Create SSH directory with detailed logging
          echo "Creating SSH directory..."
          mkdir -p ~/.ssh
          echo "SSH directory creation result: $?"
          ls -la ~/ | grep ssh || echo "No .ssh directory found in home"
          
          # Test if we can write to the SSH directory
          echo "Testing SSH directory write access..."
          touch ~/.ssh/test_file && rm ~/.ssh/test_file && echo "SSH directory is writable" || echo "SSH directory is not writable"
          
          echo "Adding EC2 host to known_hosts..."
          ssh-keyscan -H ${EC2_HOST} >> ~/.ssh/known_hosts 2>&1
          echo "ssh-keyscan result: $?"
          
          echo "Connecting to EC2 instance at ${EC2_HOST}..."
          echo "Testing basic connectivity..."
          nc -zv ${EC2_HOST} 22 || echo "Port 22 is not reachable"
          ssh -vvv -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -o ConnectTimeout=30 -i ssh_key.pem ${EC2_USER}@${EC2_HOST} << 'EOF'
            echo "Connected to EC2 instance"
            cd /home/ec2-user/every-circle
            
            # Activate virtual environment
            source .venv/bin/activate
            cd Every-Circle-Backend
            
            # Pull latest code
            echo "Pulling latest code..."
            git pull origin master
            
            # Install dependencies in the correct order with timeout handling
            echo "=== EC2: Installing PyTorch (this may take a few minutes) ==="
            timeout 300 pip3 install torch==2.2.2+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html || {
              echo "=== EC2: PyTorch installation timed out or failed, but continuing (likely already installed) ==="
            }
            
            echo "=== EC2: Installing requirements-part1 ==="
            pip3 install -r requirements-part1.txt || echo "requirements-part1 installation failed, but continuing..."
            pip3 cache purge
            
            echo "=== EC2: Installing requirements-part2 ==="
            pip3 install -r requirements-part2.txt || echo "requirements-part2 installation failed, but continuing..."
            pip3 cache purge
            
            echo "=== EC2: Installing numpy ==="
            pip3 install numpy==1.24.3 || echo "numpy installation failed, but continuing..."
            
            # Restart the application using supervisor (correct program name)
            echo "Restarting application..."
            sudo supervisorctl restart ec-api
            
            # Check status
            sudo supervisorctl status ec-api
            
            echo "Deployment completed"
            exit 0
          EOF

      - name: Health Check
        run: |
          sleep 10
          echo "Running health check..."
          curl -f http://${{ secrets.EC2_HOST }}/lists || exit 1
          echo "Health check passed - API is responding correctly"